// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: types.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace COD.Types {

  /// <summary>Holder for reflection information generated from types.proto</summary>
  public static partial class TypesReflection {

    #region Descriptor
    /// <summary>File descriptor for types.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TypesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt0eXBlcy5wcm90bxIJQ09ELlR5cGVzIikKBlZlY3RvchIJCgF4GAEgASgC",
            "EgkKAXkYAiABKAISCQoBehgDIAEoAiI4CgpRdWF0ZXJuaW9uEgkKAXgYASAB",
            "KAISCQoBeRgCIAEoAhIJCgF6GAMgASgCEgkKAXcYBCABKAIiMwoFQ29sb3IS",
            "CQoBchgBIAEoAhIJCgFnGAIgASgCEgkKAWIYAyABKAISCQoBYRgEIAEoAiK2",
            "AQoQQW1iaWVuY2VTZXR0aW5ncxIoCg5za3laZW5pdGhDb2xvchgBIAEoCzIQ",
            "LkNPRC5UeXBlcy5Db2xvchIpCg9za3lIb3Jpem9uQ29sb3IYAiABKAsyEC5D",
            "T0QuVHlwZXMuQ29sb3ISEwoLc3VuQWx0aXR1ZGUYAyABKAISEgoKc3VuQXpp",
            "bXV0aBgEIAEoAhIPCgdzdW5TaXplGAUgASgCEhMKC2ZvZ0REZW5zaXR5GAYg",
            "ASgCIqoBCg5MZXZlbE5vZGVHcm91cBIjCghwb3NpdGlvbhgBIAEoCzIRLkNP",
            "RC5UeXBlcy5WZWN0b3ISIAoFc2NhbGUYAiABKAsyES5DT0QuVHlwZXMuVmVj",
            "dG9yEicKCHJvdGF0aW9uGAMgASgLMhUuQ09ELlR5cGVzLlF1YXRlcm5pb24S",
            "KAoKY2hpbGROb2RlcxgEIAMoCzIULkNPRC5UeXBlcy5MZXZlbE5vZGUibgoO",
            "TGV2ZWxOb2RlU3RhcnQSIwoIcG9zaXRpb24YASABKAsyES5DT0QuVHlwZXMu",
            "VmVjdG9yEicKCHJvdGF0aW9uGAIgASgLMhUuQ09ELlR5cGVzLlF1YXRlcm5p",
            "b24SDgoGcmFkaXVzGAMgASgCIkYKD0xldmVsTm9kZUZpbmlzaBIjCghwb3Np",
            "dGlvbhgBIAEoCzIRLkNPRC5UeXBlcy5WZWN0b3ISDgoGcmFkaXVzGAIgASgC",
            "IowCCg9MZXZlbE5vZGVTdGF0aWMSKAoFc2hhcGUYASABKA4yGS5DT0QuVHlw",
            "ZXMuTGV2ZWxOb2RlU2hhcGUSLgoIbWF0ZXJpYWwYAiABKA4yHC5DT0QuVHlw",
            "ZXMuTGV2ZWxOb2RlTWF0ZXJpYWwSIwoIcG9zaXRpb24YAyABKAsyES5DT0Qu",
            "VHlwZXMuVmVjdG9yEiAKBXNjYWxlGAQgASgLMhEuQ09ELlR5cGVzLlZlY3Rv",
            "chInCghyb3RhdGlvbhgFIAEoCzIVLkNPRC5UeXBlcy5RdWF0ZXJuaW9uEh8K",
            "BWNvbG9yGAYgASgLMhAuQ09ELlR5cGVzLkNvbG9yEg4KBmlzTmVvbhgHIAEo",
            "CCKHAgoSTGV2ZWxOb2RlQ3J1bWJsaW5nEigKBXNoYXBlGAEgASgOMhkuQ09E",
            "LlR5cGVzLkxldmVsTm9kZVNoYXBlEi4KCG1hdGVyaWFsGAIgASgOMhwuQ09E",
            "LlR5cGVzLkxldmVsTm9kZU1hdGVyaWFsEiMKCHBvc2l0aW9uGAMgASgLMhEu",
            "Q09ELlR5cGVzLlZlY3RvchIgCgVzY2FsZRgEIAEoCzIRLkNPRC5UeXBlcy5W",
            "ZWN0b3ISJwoIcm90YXRpb24YBSABKAsyFS5DT0QuVHlwZXMuUXVhdGVybmlv",
            "bhISCgpzdGFibGVUaW1lGAYgASgCEhMKC3Jlc3Bhd25UaW1lGAcgASgCImsK",
            "DUxldmVsTm9kZVNpZ24SIwoIcG9zaXRpb24YASABKAsyES5DT0QuVHlwZXMu",
            "VmVjdG9yEicKCHJvdGF0aW9uGAIgASgLMhUuQ09ELlR5cGVzLlF1YXRlcm5p",
            "b24SDAoEdGV4dBgDIAEoCSJsCg5BbmltYXRpb25GcmFtZRIMCgR0aW1lGAEg",
            "ASgCEiMKCHBvc2l0aW9uGAIgASgLMhEuQ09ELlR5cGVzLlZlY3RvchInCghy",
            "b3RhdGlvbhgDIAEoCzIVLkNPRC5UeXBlcy5RdWF0ZXJuaW9uIq4BCglBbmlt",
            "YXRpb24SDAoEbmFtZRgBIAEoCRIpCgZmcmFtZXMYAiADKAsyGS5DT0QuVHlw",
            "ZXMuQW5pbWF0aW9uRnJhbWUSMQoJZGlyZWN0aW9uGAMgASgOMh4uQ09ELlR5",
            "cGVzLkFuaW1hdGlvbi5EaXJlY3Rpb24SDQoFc3BlZWQYBCABKAIiJgoJRGly",
            "ZWN0aW9uEgsKB1JFU1RBUlQQABIMCghQSU5HUE9ORxABIpoDCglMZXZlbE5v",
            "ZGUSEAoIaXNMb2NrZWQYBiABKAgSMwoObGV2ZWxOb2RlU3RhcnQYASABKAsy",
            "GS5DT0QuVHlwZXMuTGV2ZWxOb2RlU3RhcnRIABI1Cg9sZXZlbE5vZGVGaW5p",
            "c2gYAiABKAsyGi5DT0QuVHlwZXMuTGV2ZWxOb2RlRmluaXNoSAASNQoPbGV2",
            "ZWxOb2RlU3RhdGljGAMgASgLMhouQ09ELlR5cGVzLkxldmVsTm9kZVN0YXRp",
            "Y0gAEjEKDWxldmVsTm9kZVNpZ24YBCABKAsyGC5DT0QuVHlwZXMuTGV2ZWxO",
            "b2RlU2lnbkgAEjsKEmxldmVsTm9kZUNydW1ibGluZxgFIAEoCzIdLkNPRC5U",
            "eXBlcy5MZXZlbE5vZGVDcnVtYmxpbmdIABIzCg5sZXZlbE5vZGVHcm91cBgH",
            "IAEoCzIZLkNPRC5UeXBlcy5MZXZlbE5vZGVHcm91cEgAEigKCmFuaW1hdGlv",
            "bnMYDyADKAsyFC5DT0QuVHlwZXMuQW5pbWF0aW9uQgkKB2NvbnRlbnQqkAEK",
            "DkxldmVsTm9kZVNoYXBlEgkKBVNUQVJUEAASCgoGRklOSVNIEAESCAoEU0lH",
            "ThACEhwKGF9fRU5EX09GX1NQRUNJQUxfUEFSVFNfXxADEgkKBENVQkUQ6AcS",
            "CwoGU1BIRVJFEOkHEg0KCENZTElOREVSEOoHEgwKB1BZUkFNSUQQ6wcSCgoF",
            "UFJJU00Q7AcqrQEKEUxldmVsTm9kZU1hdGVyaWFsEgsKB0RFRkFVTFQQABIN",
            "CglHUkFCQkFCTEUQARIHCgNJQ0UQAhIICgRMQVZBEAMSCAoEV09PRBAEEg4K",
            "CkdSQVBQTEFCTEUQBRITCg9HUkFQUExBQkxFX0xBVkEQBhIXChNHUkFCQkFC",
            "TEVfQ1JVTUJMSU5HEAcSEwoPREVGQVVMVF9DT0xPUkVEEAgSDAoIQk9VTkNJ",
            "TkcQCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::COD.Types.LevelNodeShape), typeof(global::COD.Types.LevelNodeMaterial), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Vector), global::COD.Types.Vector.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Quaternion), global::COD.Types.Quaternion.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Color), global::COD.Types.Color.Parser, new[]{ "R", "G", "B", "A" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.AmbienceSettings), global::COD.Types.AmbienceSettings.Parser, new[]{ "SkyZenithColor", "SkyHorizonColor", "SunAltitude", "SunAzimuth", "SunSize", "FogDDensity" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeGroup), global::COD.Types.LevelNodeGroup.Parser, new[]{ "Position", "Scale", "Rotation", "ChildNodes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeStart), global::COD.Types.LevelNodeStart.Parser, new[]{ "Position", "Rotation", "Radius" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeFinish), global::COD.Types.LevelNodeFinish.Parser, new[]{ "Position", "Radius" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeStatic), global::COD.Types.LevelNodeStatic.Parser, new[]{ "Shape", "Material", "Position", "Scale", "Rotation", "Color", "IsNeon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeCrumbling), global::COD.Types.LevelNodeCrumbling.Parser, new[]{ "Shape", "Material", "Position", "Scale", "Rotation", "StableTime", "RespawnTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNodeSign), global::COD.Types.LevelNodeSign.Parser, new[]{ "Position", "Rotation", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.AnimationFrame), global::COD.Types.AnimationFrame.Parser, new[]{ "Time", "Position", "Rotation" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.Animation), global::COD.Types.Animation.Parser, new[]{ "Name", "Frames", "Direction", "Speed" }, null, new[]{ typeof(global::COD.Types.Animation.Types.Direction) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::COD.Types.LevelNode), global::COD.Types.LevelNode.Parser, new[]{ "IsLocked", "LevelNodeStart", "LevelNodeFinish", "LevelNodeStatic", "LevelNodeSign", "LevelNodeCrumbling", "LevelNodeGroup", "Animations" }, new[]{ "Content" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum LevelNodeShape {
    [pbr::OriginalName("START")] Start = 0,
    [pbr::OriginalName("FINISH")] Finish = 1,
    [pbr::OriginalName("SIGN")] Sign = 2,
    [pbr::OriginalName("__END_OF_SPECIAL_PARTS__")] EndOfSpecialParts = 3,
    [pbr::OriginalName("CUBE")] Cube = 1000,
    [pbr::OriginalName("SPHERE")] Sphere = 1001,
    [pbr::OriginalName("CYLINDER")] Cylinder = 1002,
    [pbr::OriginalName("PYRAMID")] Pyramid = 1003,
    [pbr::OriginalName("PRISM")] Prism = 1004,
  }

  public enum LevelNodeMaterial {
    [pbr::OriginalName("DEFAULT")] Default = 0,
    [pbr::OriginalName("GRABBABLE")] Grabbable = 1,
    [pbr::OriginalName("ICE")] Ice = 2,
    [pbr::OriginalName("LAVA")] Lava = 3,
    [pbr::OriginalName("WOOD")] Wood = 4,
    [pbr::OriginalName("GRAPPLABLE")] Grapplable = 5,
    [pbr::OriginalName("GRAPPLABLE_LAVA")] GrapplableLava = 6,
    [pbr::OriginalName("GRABBABLE_CRUMBLING")] GrabbableCrumbling = 7,
    [pbr::OriginalName("DEFAULT_COLORED")] DefaultColored = 8,
    [pbr::OriginalName("BOUNCING")] Bouncing = 9,
  }

  #endregion

  #region Messages
  public sealed partial class Vector : pb::IMessage<Vector>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Vector> _parser = new pb::MessageParser<Vector>(() => new Vector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector(Vector other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector Clone() {
      return new Vector(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Quaternion : pb::IMessage<Quaternion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Quaternion> _parser = new pb::MessageParser<Quaternion>(() => new Quaternion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quaternion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion(Quaternion other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quaternion Clone() {
      return new Quaternion(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quaternion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quaternion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quaternion other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Color : pb::IMessage<Color>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color(Color other) : this() {
      r_ = other.r_;
      g_ = other.g_;
      b_ = other.b_;
      a_ = other.a_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Color Clone() {
      return new Color(this);
    }

    /// <summary>Field number for the "r" field.</summary>
    public const int RFieldNumber = 1;
    private float r_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float R {
      get { return r_; }
      set {
        r_ = value;
      }
    }

    /// <summary>Field number for the "g" field.</summary>
    public const int GFieldNumber = 2;
    private float g_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float G {
      get { return g_; }
      set {
        g_ = value;
      }
    }

    /// <summary>Field number for the "b" field.</summary>
    public const int BFieldNumber = 3;
    private float b_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float B {
      get { return b_; }
      set {
        b_ = value;
      }
    }

    /// <summary>Field number for the "a" field.</summary>
    public const int AFieldNumber = 4;
    private float a_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float A {
      get { return a_; }
      set {
        a_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(R, other.R)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(G, other.G)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(B, other.B)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(A, other.A)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (R != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(R);
      if (G != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(G);
      if (B != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(B);
      if (A != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(A);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (R != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(R);
      }
      if (G != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(G);
      }
      if (B != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(B);
      }
      if (A != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (R != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(R);
      }
      if (G != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(G);
      }
      if (B != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(B);
      }
      if (A != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(A);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (R != 0F) {
        size += 1 + 4;
      }
      if (G != 0F) {
        size += 1 + 4;
      }
      if (B != 0F) {
        size += 1 + 4;
      }
      if (A != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Color other) {
      if (other == null) {
        return;
      }
      if (other.R != 0F) {
        R = other.R;
      }
      if (other.G != 0F) {
        G = other.G;
      }
      if (other.B != 0F) {
        B = other.B;
      }
      if (other.A != 0F) {
        A = other.A;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            R = input.ReadFloat();
            break;
          }
          case 21: {
            G = input.ReadFloat();
            break;
          }
          case 29: {
            B = input.ReadFloat();
            break;
          }
          case 37: {
            A = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            R = input.ReadFloat();
            break;
          }
          case 21: {
            G = input.ReadFloat();
            break;
          }
          case 29: {
            B = input.ReadFloat();
            break;
          }
          case 37: {
            A = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AmbienceSettings : pb::IMessage<AmbienceSettings>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AmbienceSettings> _parser = new pb::MessageParser<AmbienceSettings>(() => new AmbienceSettings());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AmbienceSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmbienceSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmbienceSettings(AmbienceSettings other) : this() {
      skyZenithColor_ = other.skyZenithColor_ != null ? other.skyZenithColor_.Clone() : null;
      skyHorizonColor_ = other.skyHorizonColor_ != null ? other.skyHorizonColor_.Clone() : null;
      sunAltitude_ = other.sunAltitude_;
      sunAzimuth_ = other.sunAzimuth_;
      sunSize_ = other.sunSize_;
      fogDDensity_ = other.fogDDensity_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AmbienceSettings Clone() {
      return new AmbienceSettings(this);
    }

    /// <summary>Field number for the "skyZenithColor" field.</summary>
    public const int SkyZenithColorFieldNumber = 1;
    private global::COD.Types.Color skyZenithColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color SkyZenithColor {
      get { return skyZenithColor_; }
      set {
        skyZenithColor_ = value;
      }
    }

    /// <summary>Field number for the "skyHorizonColor" field.</summary>
    public const int SkyHorizonColorFieldNumber = 2;
    private global::COD.Types.Color skyHorizonColor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color SkyHorizonColor {
      get { return skyHorizonColor_; }
      set {
        skyHorizonColor_ = value;
      }
    }

    /// <summary>Field number for the "sunAltitude" field.</summary>
    public const int SunAltitudeFieldNumber = 3;
    private float sunAltitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SunAltitude {
      get { return sunAltitude_; }
      set {
        sunAltitude_ = value;
      }
    }

    /// <summary>Field number for the "sunAzimuth" field.</summary>
    public const int SunAzimuthFieldNumber = 4;
    private float sunAzimuth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SunAzimuth {
      get { return sunAzimuth_; }
      set {
        sunAzimuth_ = value;
      }
    }

    /// <summary>Field number for the "sunSize" field.</summary>
    public const int SunSizeFieldNumber = 5;
    private float sunSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SunSize {
      get { return sunSize_; }
      set {
        sunSize_ = value;
      }
    }

    /// <summary>Field number for the "fogDDensity" field.</summary>
    public const int FogDDensityFieldNumber = 6;
    private float fogDDensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FogDDensity {
      get { return fogDDensity_; }
      set {
        fogDDensity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AmbienceSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AmbienceSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SkyZenithColor, other.SkyZenithColor)) return false;
      if (!object.Equals(SkyHorizonColor, other.SkyHorizonColor)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SunAltitude, other.SunAltitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SunAzimuth, other.SunAzimuth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SunSize, other.SunSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FogDDensity, other.FogDDensity)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (skyZenithColor_ != null) hash ^= SkyZenithColor.GetHashCode();
      if (skyHorizonColor_ != null) hash ^= SkyHorizonColor.GetHashCode();
      if (SunAltitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SunAltitude);
      if (SunAzimuth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SunAzimuth);
      if (SunSize != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SunSize);
      if (FogDDensity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FogDDensity);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (skyZenithColor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SkyZenithColor);
      }
      if (skyHorizonColor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SkyHorizonColor);
      }
      if (SunAltitude != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SunAltitude);
      }
      if (SunAzimuth != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SunAzimuth);
      }
      if (SunSize != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SunSize);
      }
      if (FogDDensity != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(FogDDensity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (skyZenithColor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SkyZenithColor);
      }
      if (skyHorizonColor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SkyHorizonColor);
      }
      if (SunAltitude != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SunAltitude);
      }
      if (SunAzimuth != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(SunAzimuth);
      }
      if (SunSize != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(SunSize);
      }
      if (FogDDensity != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(FogDDensity);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (skyZenithColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkyZenithColor);
      }
      if (skyHorizonColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkyHorizonColor);
      }
      if (SunAltitude != 0F) {
        size += 1 + 4;
      }
      if (SunAzimuth != 0F) {
        size += 1 + 4;
      }
      if (SunSize != 0F) {
        size += 1 + 4;
      }
      if (FogDDensity != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AmbienceSettings other) {
      if (other == null) {
        return;
      }
      if (other.skyZenithColor_ != null) {
        if (skyZenithColor_ == null) {
          SkyZenithColor = new global::COD.Types.Color();
        }
        SkyZenithColor.MergeFrom(other.SkyZenithColor);
      }
      if (other.skyHorizonColor_ != null) {
        if (skyHorizonColor_ == null) {
          SkyHorizonColor = new global::COD.Types.Color();
        }
        SkyHorizonColor.MergeFrom(other.SkyHorizonColor);
      }
      if (other.SunAltitude != 0F) {
        SunAltitude = other.SunAltitude;
      }
      if (other.SunAzimuth != 0F) {
        SunAzimuth = other.SunAzimuth;
      }
      if (other.SunSize != 0F) {
        SunSize = other.SunSize;
      }
      if (other.FogDDensity != 0F) {
        FogDDensity = other.FogDDensity;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (skyZenithColor_ == null) {
              SkyZenithColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyZenithColor);
            break;
          }
          case 18: {
            if (skyHorizonColor_ == null) {
              SkyHorizonColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyHorizonColor);
            break;
          }
          case 29: {
            SunAltitude = input.ReadFloat();
            break;
          }
          case 37: {
            SunAzimuth = input.ReadFloat();
            break;
          }
          case 45: {
            SunSize = input.ReadFloat();
            break;
          }
          case 53: {
            FogDDensity = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (skyZenithColor_ == null) {
              SkyZenithColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyZenithColor);
            break;
          }
          case 18: {
            if (skyHorizonColor_ == null) {
              SkyHorizonColor = new global::COD.Types.Color();
            }
            input.ReadMessage(SkyHorizonColor);
            break;
          }
          case 29: {
            SunAltitude = input.ReadFloat();
            break;
          }
          case 37: {
            SunAzimuth = input.ReadFloat();
            break;
          }
          case 45: {
            SunSize = input.ReadFloat();
            break;
          }
          case 53: {
            FogDDensity = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeGroup : pb::IMessage<LevelNodeGroup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeGroup> _parser = new pb::MessageParser<LevelNodeGroup>(() => new LevelNodeGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeGroup(LevelNodeGroup other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      childNodes_ = other.childNodes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeGroup Clone() {
      return new LevelNodeGroup(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private global::COD.Types.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "childNodes" field.</summary>
    public const int ChildNodesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::COD.Types.LevelNode> _repeated_childNodes_codec
        = pb::FieldCodec.ForMessage(34, global::COD.Types.LevelNode.Parser);
    private readonly pbc::RepeatedField<global::COD.Types.LevelNode> childNodes_ = new pbc::RepeatedField<global::COD.Types.LevelNode>();
    /// <summary>
    ///This is where level nodes that are part of the group are stored when saving to file / loading
    ///It is ok to be empty when networking a groups transform
    ///There is an additional message for networking grouping and ungrouping (LevelNodeGroupRequest, LevelNodeGroupResponse)
    ///When sending the full level on a new player joining the editor, first the level nodes are sent on their own and then a group response to group them
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::COD.Types.LevelNode> ChildNodes {
      get { return childNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if(!childNodes_.Equals(other.childNodes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      hash ^= childNodes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      childNodes_.WriteTo(output, _repeated_childNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      childNodes_.WriteTo(ref output, _repeated_childNodes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      size += childNodes_.CalculateSize(_repeated_childNodes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeGroup other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::COD.Types.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      childNodes_.Add(other.childNodes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 34: {
            childNodes_.AddEntriesFrom(input, _repeated_childNodes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 34: {
            childNodes_.AddEntriesFrom(ref input, _repeated_childNodes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeStart : pb::IMessage<LevelNodeStart>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeStart> _parser = new pb::MessageParser<LevelNodeStart>(() => new LevelNodeStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStart(LevelNodeStart other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStart Clone() {
      return new LevelNodeStart(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::COD.Types.Quaternion rotation_;
    /// <summary>
    ///Should always be upright and is meant to be used for the player rotation on spawn
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 3;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Radius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Radius != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeStart other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 29: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 29: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeFinish : pb::IMessage<LevelNodeFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeFinish> _parser = new pb::MessageParser<LevelNodeFinish>(() => new LevelNodeFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeFinish(LevelNodeFinish other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      radius_ = other.radius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeFinish Clone() {
      return new LevelNodeFinish(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 2;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (Radius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (Radius != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Radius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeFinish other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 21: {
            Radius = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeStatic : pb::IMessage<LevelNodeStatic>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeStatic> _parser = new pb::MessageParser<LevelNodeStatic>(() => new LevelNodeStatic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeStatic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStatic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStatic(LevelNodeStatic other) : this() {
      shape_ = other.shape_;
      material_ = other.material_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      isNeon_ = other.isNeon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeStatic Clone() {
      return new LevelNodeStatic(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::COD.Types.LevelNodeShape shape_ = global::COD.Types.LevelNodeShape.Start;
    /// <summary>
    ///Must be one of CUBE, SPHERE, CYLINDER, PYRAMID, PRISM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 2;
    private global::COD.Types.LevelNodeMaterial material_ = global::COD.Types.LevelNodeMaterial.Default;
    /// <summary>
    ///Can not be GRABBABLE_CRUMBLING
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeMaterial Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 4;
    private global::COD.Types.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 6;
    private global::COD.Types.Color color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "isNeon" field.</summary>
    public const int IsNeonFieldNumber = 7;
    private bool isNeon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsNeon {
      get { return isNeon_; }
      set {
        isNeon_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeStatic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeStatic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shape != other.Shape) return false;
      if (Material != other.Material) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (IsNeon != other.IsNeon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shape != global::COD.Types.LevelNodeShape.Start) hash ^= Shape.GetHashCode();
      if (Material != global::COD.Types.LevelNodeMaterial.Default) hash ^= Material.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (IsNeon != false) hash ^= IsNeon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (color_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color);
      }
      if (IsNeon != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsNeon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (color_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color);
      }
      if (IsNeon != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsNeon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Material);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (IsNeon != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeStatic other) {
      if (other == null) {
        return;
      }
      if (other.Shape != global::COD.Types.LevelNodeShape.Start) {
        Shape = other.Shape;
      }
      if (other.Material != global::COD.Types.LevelNodeMaterial.Default) {
        Material = other.Material;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::COD.Types.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::COD.Types.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.IsNeon != false) {
        IsNeon = other.IsNeon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 50: {
            if (color_ == null) {
              Color = new global::COD.Types.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 56: {
            IsNeon = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 50: {
            if (color_ == null) {
              Color = new global::COD.Types.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 56: {
            IsNeon = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeCrumbling : pb::IMessage<LevelNodeCrumbling>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeCrumbling> _parser = new pb::MessageParser<LevelNodeCrumbling>(() => new LevelNodeCrumbling());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeCrumbling> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeCrumbling() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeCrumbling(LevelNodeCrumbling other) : this() {
      shape_ = other.shape_;
      material_ = other.material_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      scale_ = other.scale_ != null ? other.scale_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      stableTime_ = other.stableTime_;
      respawnTime_ = other.respawnTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeCrumbling Clone() {
      return new LevelNodeCrumbling(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::COD.Types.LevelNodeShape shape_ = global::COD.Types.LevelNodeShape.Start;
    /// <summary>
    ///Must be one of CUBE, SPHERE, CYLINDER, PYRAMID, PRISM
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "material" field.</summary>
    public const int MaterialFieldNumber = 2;
    private global::COD.Types.LevelNodeMaterial material_ = global::COD.Types.LevelNodeMaterial.Default;
    /// <summary>
    ///Must be GRABBABLE_CRUMBLING
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeMaterial Material {
      get { return material_; }
      set {
        material_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 4;
    private global::COD.Types.Vector scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 5;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "stableTime" field.</summary>
    public const int StableTimeFieldNumber = 6;
    private float stableTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StableTime {
      get { return stableTime_; }
      set {
        stableTime_ = value;
      }
    }

    /// <summary>Field number for the "respawnTime" field.</summary>
    public const int RespawnTimeFieldNumber = 7;
    private float respawnTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RespawnTime {
      get { return respawnTime_; }
      set {
        respawnTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeCrumbling);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeCrumbling other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Shape != other.Shape) return false;
      if (Material != other.Material) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Scale, other.Scale)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StableTime, other.StableTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RespawnTime, other.RespawnTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Shape != global::COD.Types.LevelNodeShape.Start) hash ^= Shape.GetHashCode();
      if (Material != global::COD.Types.LevelNodeMaterial.Default) hash ^= Material.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (scale_ != null) hash ^= Scale.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (StableTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StableTime);
      if (RespawnTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RespawnTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (StableTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StableTime);
      }
      if (RespawnTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RespawnTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Material);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (scale_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scale);
      }
      if (rotation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Rotation);
      }
      if (StableTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(StableTime);
      }
      if (RespawnTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RespawnTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Shape != global::COD.Types.LevelNodeShape.Start) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Shape);
      }
      if (Material != global::COD.Types.LevelNodeMaterial.Default) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Material);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (scale_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scale);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (StableTime != 0F) {
        size += 1 + 4;
      }
      if (RespawnTime != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeCrumbling other) {
      if (other == null) {
        return;
      }
      if (other.Shape != global::COD.Types.LevelNodeShape.Start) {
        Shape = other.Shape;
      }
      if (other.Material != global::COD.Types.LevelNodeMaterial.Default) {
        Material = other.Material;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.scale_ != null) {
        if (scale_ == null) {
          Scale = new global::COD.Types.Vector();
        }
        Scale.MergeFrom(other.Scale);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.StableTime != 0F) {
        StableTime = other.StableTime;
      }
      if (other.RespawnTime != 0F) {
        RespawnTime = other.RespawnTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 53: {
            StableTime = input.ReadFloat();
            break;
          }
          case 61: {
            RespawnTime = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Shape = (global::COD.Types.LevelNodeShape) input.ReadEnum();
            break;
          }
          case 16: {
            Material = (global::COD.Types.LevelNodeMaterial) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 34: {
            if (scale_ == null) {
              Scale = new global::COD.Types.Vector();
            }
            input.ReadMessage(Scale);
            break;
          }
          case 42: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 53: {
            StableTime = input.ReadFloat();
            break;
          }
          case 61: {
            RespawnTime = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LevelNodeSign : pb::IMessage<LevelNodeSign>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNodeSign> _parser = new pb::MessageParser<LevelNodeSign>(() => new LevelNodeSign());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNodeSign> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeSign() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeSign(LevelNodeSign other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNodeSign Clone() {
      return new LevelNodeSign(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 2;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNodeSign);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNodeSign other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Rotation);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNodeSign other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AnimationFrame : pb::IMessage<AnimationFrame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AnimationFrame> _parser = new pb::MessageParser<AnimationFrame>(() => new AnimationFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationFrame(AnimationFrame other) : this() {
      time_ = other.time_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationFrame Clone() {
      return new AnimationFrame(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private float time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::COD.Types.Vector position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Vector Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::COD.Types.Quaternion rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Quaternion Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Time, other.Time)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Time);
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Time != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Time);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0F) {
        size += 1 + 4;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationFrame other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0F) {
        Time = other.Time;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::COD.Types.Vector();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          Rotation = new global::COD.Types.Quaternion();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Time = input.ReadFloat();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::COD.Types.Vector();
            }
            input.ReadMessage(Position);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              Rotation = new global::COD.Types.Quaternion();
            }
            input.ReadMessage(Rotation);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Animation : pb::IMessage<Animation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Animation> _parser = new pb::MessageParser<Animation>(() => new Animation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation(Animation other) : this() {
      name_ = other.name_;
      frames_ = other.frames_.Clone();
      direction_ = other.direction_;
      speed_ = other.speed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation Clone() {
      return new Animation(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::COD.Types.AnimationFrame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(18, global::COD.Types.AnimationFrame.Parser);
    private readonly pbc::RepeatedField<global::COD.Types.AnimationFrame> frames_ = new pbc::RepeatedField<global::COD.Types.AnimationFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::COD.Types.AnimationFrame> Frames {
      get { return frames_; }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::COD.Types.Animation.Types.Direction direction_ = global::COD.Types.Animation.Types.Direction.Restart;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.Animation.Types.Direction Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!frames_.Equals(other.frames_)) return false;
      if (Direction != other.Direction) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= frames_.GetHashCode();
      if (Direction != global::COD.Types.Animation.Types.Direction.Restart) hash ^= Direction.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
      if (Direction != global::COD.Types.Animation.Types.Direction.Restart) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Direction);
      }
      if (Speed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Speed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      frames_.WriteTo(ref output, _repeated_frames_codec);
      if (Direction != global::COD.Types.Animation.Types.Direction.Restart) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Direction);
      }
      if (Speed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Speed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (Direction != global::COD.Types.Animation.Types.Direction.Restart) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Direction);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animation other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      frames_.Add(other.frames_);
      if (other.Direction != global::COD.Types.Animation.Types.Direction.Restart) {
        Direction = other.Direction;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
          case 24: {
            Direction = (global::COD.Types.Animation.Types.Direction) input.ReadEnum();
            break;
          }
          case 37: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(ref input, _repeated_frames_codec);
            break;
          }
          case 24: {
            Direction = (global::COD.Types.Animation.Types.Direction) input.ReadEnum();
            break;
          }
          case 37: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Animation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Direction {
        /// <summary>
        ///After the last frame, jump back to the first frame
        /// </summary>
        [pbr::OriginalName("RESTART")] Restart = 0,
        /// <summary>
        ///After the last frame, play the animation backwards
        /// </summary>
        [pbr::OriginalName("PINGPONG")] Pingpong = 1,
      }

    }
    #endregion

  }

  public sealed partial class LevelNode : pb::IMessage<LevelNode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LevelNode> _parser = new pb::MessageParser<LevelNode>(() => new LevelNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LevelNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::COD.Types.TypesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNode(LevelNode other) : this() {
      isLocked_ = other.isLocked_;
      animations_ = other.animations_.Clone();
      switch (other.ContentCase) {
        case ContentOneofCase.LevelNodeStart:
          LevelNodeStart = other.LevelNodeStart.Clone();
          break;
        case ContentOneofCase.LevelNodeFinish:
          LevelNodeFinish = other.LevelNodeFinish.Clone();
          break;
        case ContentOneofCase.LevelNodeStatic:
          LevelNodeStatic = other.LevelNodeStatic.Clone();
          break;
        case ContentOneofCase.LevelNodeSign:
          LevelNodeSign = other.LevelNodeSign.Clone();
          break;
        case ContentOneofCase.LevelNodeCrumbling:
          LevelNodeCrumbling = other.LevelNodeCrumbling.Clone();
          break;
        case ContentOneofCase.LevelNodeGroup:
          LevelNodeGroup = other.LevelNodeGroup.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LevelNode Clone() {
      return new LevelNode(this);
    }

    /// <summary>Field number for the "isLocked" field.</summary>
    public const int IsLockedFieldNumber = 6;
    private bool isLocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLocked {
      get { return isLocked_; }
      set {
        isLocked_ = value;
      }
    }

    /// <summary>Field number for the "levelNodeStart" field.</summary>
    public const int LevelNodeStartFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeStart LevelNodeStart {
      get { return contentCase_ == ContentOneofCase.LevelNodeStart ? (global::COD.Types.LevelNodeStart) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeStart;
      }
    }

    /// <summary>Field number for the "levelNodeFinish" field.</summary>
    public const int LevelNodeFinishFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeFinish LevelNodeFinish {
      get { return contentCase_ == ContentOneofCase.LevelNodeFinish ? (global::COD.Types.LevelNodeFinish) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeFinish;
      }
    }

    /// <summary>Field number for the "levelNodeStatic" field.</summary>
    public const int LevelNodeStaticFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeStatic LevelNodeStatic {
      get { return contentCase_ == ContentOneofCase.LevelNodeStatic ? (global::COD.Types.LevelNodeStatic) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeStatic;
      }
    }

    /// <summary>Field number for the "levelNodeSign" field.</summary>
    public const int LevelNodeSignFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeSign LevelNodeSign {
      get { return contentCase_ == ContentOneofCase.LevelNodeSign ? (global::COD.Types.LevelNodeSign) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeSign;
      }
    }

    /// <summary>Field number for the "levelNodeCrumbling" field.</summary>
    public const int LevelNodeCrumblingFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeCrumbling LevelNodeCrumbling {
      get { return contentCase_ == ContentOneofCase.LevelNodeCrumbling ? (global::COD.Types.LevelNodeCrumbling) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeCrumbling;
      }
    }

    /// <summary>Field number for the "levelNodeGroup" field.</summary>
    public const int LevelNodeGroupFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::COD.Types.LevelNodeGroup LevelNodeGroup {
      get { return contentCase_ == ContentOneofCase.LevelNodeGroup ? (global::COD.Types.LevelNodeGroup) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.LevelNodeGroup;
      }
    }

    /// <summary>Field number for the "animations" field.</summary>
    public const int AnimationsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::COD.Types.Animation> _repeated_animations_codec
        = pb::FieldCodec.ForMessage(122, global::COD.Types.Animation.Parser);
    private readonly pbc::RepeatedField<global::COD.Types.Animation> animations_ = new pbc::RepeatedField<global::COD.Types.Animation>();
    /// <summary>
    ///A level node can have any number (might limit it in the UI) of named animations, if groups are involved every block that is part of the same animation should have an animation with the same name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::COD.Types.Animation> Animations {
      get { return animations_; }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      LevelNodeStart = 1,
      LevelNodeFinish = 2,
      LevelNodeStatic = 3,
      LevelNodeSign = 4,
      LevelNodeCrumbling = 5,
      LevelNodeGroup = 7,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LevelNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LevelNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsLocked != other.IsLocked) return false;
      if (!object.Equals(LevelNodeStart, other.LevelNodeStart)) return false;
      if (!object.Equals(LevelNodeFinish, other.LevelNodeFinish)) return false;
      if (!object.Equals(LevelNodeStatic, other.LevelNodeStatic)) return false;
      if (!object.Equals(LevelNodeSign, other.LevelNodeSign)) return false;
      if (!object.Equals(LevelNodeCrumbling, other.LevelNodeCrumbling)) return false;
      if (!object.Equals(LevelNodeGroup, other.LevelNodeGroup)) return false;
      if(!animations_.Equals(other.animations_)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsLocked != false) hash ^= IsLocked.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeStart) hash ^= LevelNodeStart.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) hash ^= LevelNodeFinish.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) hash ^= LevelNodeStatic.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeSign) hash ^= LevelNodeSign.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) hash ^= LevelNodeCrumbling.GetHashCode();
      if (contentCase_ == ContentOneofCase.LevelNodeGroup) hash ^= LevelNodeGroup.GetHashCode();
      hash ^= animations_.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (contentCase_ == ContentOneofCase.LevelNodeStart) {
        output.WriteRawTag(10);
        output.WriteMessage(LevelNodeStart);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
        output.WriteRawTag(18);
        output.WriteMessage(LevelNodeFinish);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
        output.WriteRawTag(26);
        output.WriteMessage(LevelNodeStatic);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeSign) {
        output.WriteRawTag(34);
        output.WriteMessage(LevelNodeSign);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
        output.WriteRawTag(42);
        output.WriteMessage(LevelNodeCrumbling);
      }
      if (IsLocked != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsLocked);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeGroup) {
        output.WriteRawTag(58);
        output.WriteMessage(LevelNodeGroup);
      }
      animations_.WriteTo(output, _repeated_animations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (contentCase_ == ContentOneofCase.LevelNodeStart) {
        output.WriteRawTag(10);
        output.WriteMessage(LevelNodeStart);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
        output.WriteRawTag(18);
        output.WriteMessage(LevelNodeFinish);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
        output.WriteRawTag(26);
        output.WriteMessage(LevelNodeStatic);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeSign) {
        output.WriteRawTag(34);
        output.WriteMessage(LevelNodeSign);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
        output.WriteRawTag(42);
        output.WriteMessage(LevelNodeCrumbling);
      }
      if (IsLocked != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsLocked);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeGroup) {
        output.WriteRawTag(58);
        output.WriteMessage(LevelNodeGroup);
      }
      animations_.WriteTo(ref output, _repeated_animations_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsLocked != false) {
        size += 1 + 1;
      }
      if (contentCase_ == ContentOneofCase.LevelNodeStart) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeStart);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeFinish);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeStatic);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeSign) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeSign);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeCrumbling);
      }
      if (contentCase_ == ContentOneofCase.LevelNodeGroup) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LevelNodeGroup);
      }
      size += animations_.CalculateSize(_repeated_animations_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LevelNode other) {
      if (other == null) {
        return;
      }
      if (other.IsLocked != false) {
        IsLocked = other.IsLocked;
      }
      animations_.Add(other.animations_);
      switch (other.ContentCase) {
        case ContentOneofCase.LevelNodeStart:
          if (LevelNodeStart == null) {
            LevelNodeStart = new global::COD.Types.LevelNodeStart();
          }
          LevelNodeStart.MergeFrom(other.LevelNodeStart);
          break;
        case ContentOneofCase.LevelNodeFinish:
          if (LevelNodeFinish == null) {
            LevelNodeFinish = new global::COD.Types.LevelNodeFinish();
          }
          LevelNodeFinish.MergeFrom(other.LevelNodeFinish);
          break;
        case ContentOneofCase.LevelNodeStatic:
          if (LevelNodeStatic == null) {
            LevelNodeStatic = new global::COD.Types.LevelNodeStatic();
          }
          LevelNodeStatic.MergeFrom(other.LevelNodeStatic);
          break;
        case ContentOneofCase.LevelNodeSign:
          if (LevelNodeSign == null) {
            LevelNodeSign = new global::COD.Types.LevelNodeSign();
          }
          LevelNodeSign.MergeFrom(other.LevelNodeSign);
          break;
        case ContentOneofCase.LevelNodeCrumbling:
          if (LevelNodeCrumbling == null) {
            LevelNodeCrumbling = new global::COD.Types.LevelNodeCrumbling();
          }
          LevelNodeCrumbling.MergeFrom(other.LevelNodeCrumbling);
          break;
        case ContentOneofCase.LevelNodeGroup:
          if (LevelNodeGroup == null) {
            LevelNodeGroup = new global::COD.Types.LevelNodeGroup();
          }
          LevelNodeGroup.MergeFrom(other.LevelNodeGroup);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::COD.Types.LevelNodeStart subBuilder = new global::COD.Types.LevelNodeStart();
            if (contentCase_ == ContentOneofCase.LevelNodeStart) {
              subBuilder.MergeFrom(LevelNodeStart);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStart = subBuilder;
            break;
          }
          case 18: {
            global::COD.Types.LevelNodeFinish subBuilder = new global::COD.Types.LevelNodeFinish();
            if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
              subBuilder.MergeFrom(LevelNodeFinish);
            }
            input.ReadMessage(subBuilder);
            LevelNodeFinish = subBuilder;
            break;
          }
          case 26: {
            global::COD.Types.LevelNodeStatic subBuilder = new global::COD.Types.LevelNodeStatic();
            if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
              subBuilder.MergeFrom(LevelNodeStatic);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStatic = subBuilder;
            break;
          }
          case 34: {
            global::COD.Types.LevelNodeSign subBuilder = new global::COD.Types.LevelNodeSign();
            if (contentCase_ == ContentOneofCase.LevelNodeSign) {
              subBuilder.MergeFrom(LevelNodeSign);
            }
            input.ReadMessage(subBuilder);
            LevelNodeSign = subBuilder;
            break;
          }
          case 42: {
            global::COD.Types.LevelNodeCrumbling subBuilder = new global::COD.Types.LevelNodeCrumbling();
            if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
              subBuilder.MergeFrom(LevelNodeCrumbling);
            }
            input.ReadMessage(subBuilder);
            LevelNodeCrumbling = subBuilder;
            break;
          }
          case 48: {
            IsLocked = input.ReadBool();
            break;
          }
          case 58: {
            global::COD.Types.LevelNodeGroup subBuilder = new global::COD.Types.LevelNodeGroup();
            if (contentCase_ == ContentOneofCase.LevelNodeGroup) {
              subBuilder.MergeFrom(LevelNodeGroup);
            }
            input.ReadMessage(subBuilder);
            LevelNodeGroup = subBuilder;
            break;
          }
          case 122: {
            animations_.AddEntriesFrom(input, _repeated_animations_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::COD.Types.LevelNodeStart subBuilder = new global::COD.Types.LevelNodeStart();
            if (contentCase_ == ContentOneofCase.LevelNodeStart) {
              subBuilder.MergeFrom(LevelNodeStart);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStart = subBuilder;
            break;
          }
          case 18: {
            global::COD.Types.LevelNodeFinish subBuilder = new global::COD.Types.LevelNodeFinish();
            if (contentCase_ == ContentOneofCase.LevelNodeFinish) {
              subBuilder.MergeFrom(LevelNodeFinish);
            }
            input.ReadMessage(subBuilder);
            LevelNodeFinish = subBuilder;
            break;
          }
          case 26: {
            global::COD.Types.LevelNodeStatic subBuilder = new global::COD.Types.LevelNodeStatic();
            if (contentCase_ == ContentOneofCase.LevelNodeStatic) {
              subBuilder.MergeFrom(LevelNodeStatic);
            }
            input.ReadMessage(subBuilder);
            LevelNodeStatic = subBuilder;
            break;
          }
          case 34: {
            global::COD.Types.LevelNodeSign subBuilder = new global::COD.Types.LevelNodeSign();
            if (contentCase_ == ContentOneofCase.LevelNodeSign) {
              subBuilder.MergeFrom(LevelNodeSign);
            }
            input.ReadMessage(subBuilder);
            LevelNodeSign = subBuilder;
            break;
          }
          case 42: {
            global::COD.Types.LevelNodeCrumbling subBuilder = new global::COD.Types.LevelNodeCrumbling();
            if (contentCase_ == ContentOneofCase.LevelNodeCrumbling) {
              subBuilder.MergeFrom(LevelNodeCrumbling);
            }
            input.ReadMessage(subBuilder);
            LevelNodeCrumbling = subBuilder;
            break;
          }
          case 48: {
            IsLocked = input.ReadBool();
            break;
          }
          case 58: {
            global::COD.Types.LevelNodeGroup subBuilder = new global::COD.Types.LevelNodeGroup();
            if (contentCase_ == ContentOneofCase.LevelNodeGroup) {
              subBuilder.MergeFrom(LevelNodeGroup);
            }
            input.ReadMessage(subBuilder);
            LevelNodeGroup = subBuilder;
            break;
          }
          case 122: {
            animations_.AddEntriesFrom(ref input, _repeated_animations_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
